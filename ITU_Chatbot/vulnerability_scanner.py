import re
import json

def identify_sql_injection(code):
    sql_pattern = re.compile(r"SELECT \* FROM .* WHERE .*=\s*'.*'.*;", re.IGNORECASE)
    return [(m.start(), m.end(), code[m.start():m.end()]) for m in sql_pattern.finditer(code)]

def identify_xss(code):
    xss_pattern = re.compile(r"document\.getElementById\('.*'\)\.innerHTML\s*=\s*.*;", re.IGNORECASE)
    return [(m.start(), m.end(), code[m.start():m.end()]) for m in xss_pattern.finditer(code)]

def identify_idor(code):
    idor_pattern = re.compile(r"SELECT \* FROM .* WHERE id\s*=\s*\$.*;", re.IGNORECASE)
    return [(m.start(), m.end(), code[m.start():m.end()]) for m in idor_pattern.finditer(code)]

def identify_csrf(code):
    csrf_pattern = re.compile(r"csrf_token", re.IGNORECASE)
    if not csrf_pattern.search(code):
        return [(0, 0, "CSRF token missing")]
    return []

def get_line_number_and_snippet(code, start, end):
    lines = code.split('\n')
    char_count = 0
    for i, line in enumerate(lines):
        char_count += len(line) + 1  # +1 for the newline character
        if start < char_count:
            return i + 1, line.strip()
    return None, None

def analyze_code(code):
    vulnerabilities = {
        "sql_injection": identify_sql_injection(code),
        "xss": identify_xss(code),
        "idor": identify_idor(code),
        "csrf": identify_csrf(code)
    }
    results = []
    for vuln, positions in vulnerabilities.items():
        if positions:
            for start, end, snippet in positions:
                line_number, line_snippet = get_line_number_and_snippet(code, start, end)
                if line_number is not None:
                    results.append({
                        "vulnerability": vuln.replace('_', ' ').title(),
                        "line": line_number,
                        "snippet": line_snippet,
                        "recommendation": get_recommendation(vuln)
                    })
    return results

def get_recommendation(vuln):
    recommendations = {
        "sql_injection": "Use prepared statements or parameterized queries to prevent SQL Injection.",
        "xss": "Use document.createTextNode or other safe methods to insert user inputs into the DOM.",
        "idor": "Use proper access controls to verify user permissions before accessing objects.",
        "csrf": "Include and verify CSRF tokens in forms to prevent CSRF attacks."
    }
    return recommendations.get(vuln, "")
